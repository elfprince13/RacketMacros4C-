@Reinclude(Headers)[= "<stdlib.h>"][= "<stdio.h>"][= "<cl_cuda.h>"][= "<cuda.h>"];

#include <stdlib.h>
#include <stdio.h>
#include <cl_cuda.h> // Hack for first parsing pre-pass
#include <cuda.h>


@CuFunc(warpReduce)[@ WReduce][@ LogSize][@ device][volatile int *sdata;][unsigned int tid;]{
	volatile int* const tdata = sdata+tid;
	@Repeat(unrollWarp)[@ I][= @Min[= 6][= @LogSize]][= 0][= -1]
			tdata[0] += tdata[(1 << (static_cast<int>(@I) - 1))];
	
}

@CuFunc(reduce)[@ Reduce][@ LogSize][@ global][int *g_idata;][int *g_odata;][unsigned int n;]{
	int __shared__ extern *sdata;
	const int blockSize = 1 << static_cast<int>(@LogSize);
	unsigned int tid = threadIdx.x;
	unsigned int i = blockIdx.x * (blockSize * 2) + tid;
	unsigned int gridSize = blockSize * 2 * gridDim.x;
	*(sdata + tid) = 0;
	while ( i < n ){
		sdata[tid] += g_idata[i] + g_idata[i + blockSize];
		i += gridSize;
	}

	@Repeat(blockReduce)[@ I][= @Min[= 9][= @LogSize]][= 6][= -1] {
		const int sizeHere = 1 << (static_cast<int>(@I) - 1);
		if(tid < sizeHere) sdata[tid] += sdata[tid + sizeHere];
		__syncthreads();
	}

	if(tid < 32){
		@WReduce(WReduce)[= @LogSize][= sdata][= tid];
	}
	if(tid == 0) g_odata[blockIdx.x] = sdata[0];

}

int main(int argc, char ** argv) {
	int blocksize = argc;
	int dimGrid = 0;
	int dimBlock = 0;
	int smemSize = 0;
	int *d_idata, *d_odata;
	switch(blocksize){
	@Repeat(unrollSwitch)[@ I][= 9][= 0][= -1]{
		case @I:
			@Reduce(reduceN)[= @I][= (dimGrid, dimBlock, smemSize)][= d_idata][= d_odata][= 0]; break;
	}
	}
	return 1;
}
