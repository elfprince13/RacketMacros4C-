@Reinclude(Headers)[= "<stdlib.h>"][= "<stdio.h>"][= "<./cl_cuda.h>"][= "<cuda.h>"];

#include <stdlib.h>
#include <stdio.h>
#include <cl_cuda.h>
#include <cuda.h>


@CuFunc(warpReduce)[@ WReduce][@ LogSize][@ device][volatile int *sdata;][unsigned int tid;]{
	volatile int* const tdata = sdata+tid;
	@Repeat(unrollWarp)[@ I][= @Min(fromCt)[= 6][= @LogSize(unrollCt)]][= 1][= (-1)]
			(*tdata) += *(tdata + (1 << (reinterpret_cast<int>(@I(iter)) - 1)));
	
}

@CuFunc(reduce)[@ Reduce][@ LogSize][@ global][int *g_idata;][int *g_odata;][unsigned int n;]{
	int __shared__ extern *sdata;
	uint3 __device__ extern const threadIdx;
	int tid = threadIdx.x;
	*(sdata + n) = *(g_idata + n);
	@WReduce(WReduce512)[= @LogSize(oursize)][= sdata][= tid];
}

int main(int argc, char ** argv) {
	int blocksize = argc;
	switch(blocksize){
	@Repeat(unrollSwitch)[@ I][= 9][= 0][= -1]{
		case @I(caseN):
			@Reduce(reduceN)[= @I(caseN)][= (0, 1, 2)][= 0][= 0][= 0];
	}
	}
	return 1;
}
